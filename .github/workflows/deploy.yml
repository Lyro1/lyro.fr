# This is a basic workflow to help you get started with Actions


name: Deploy Lyro.fr to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1 #this installs node and npm for us
        with:
          node-version: '18.x'

      - uses: actions/cache@v1 # this allows for re-using node_modules caching, making builds a bit faster.
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: NPM Install
        run: npm install

      - name: NPM Install Angular
        run: npm install -g @angular/cli > /dev/null

      - name: NPM build Angular Production
        run: ng build --configuration production --verbose

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH server's host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Delete Existing Files
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'sudo chown -R louis /var/www/lyro.fr/html'
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'rm -rf /var/www/lyro.fr/html/*'

      - name: Compress and Copy New Files to server
        run: |
          cd dist/lyro
          tar -czvf ../app.tar.gz .
          cd ..
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} app.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/lyro.fr/html

      - name: Uncompress new Files
        run: ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cd /var/www/lyro.fr/html && tar -xzvf app.tar.gz --no-overwrite-dir && rm app.tar.gz'

      - name: Give permissions
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'sudo chown -R www-data:www-data /var/www/lyro.fr/html'
